library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity tempo is
	generic (
				visor : STD_LOGIC_VECTOR(6 downto 0)
			);
	port (
			  CLOCK_50 : in STD_LOGIC;
			  A : in STD_LOGIC_VECTOR(3 downto 0);
			  B : in STD_LOGIC_VECTOR(3 downto 0);
			  S : out STD_LOGIC_VECTOR(3 downto 0)

		 );
end entity;


architecture tempo_architecture of tempo is
	signal ULA_IN_A, ULA_OUT, OUTPUT, mux_output, xor_output : std_logic_vector(3 downto 0) := (others=>'0');
	signal overflowLocal : std_logic;
	begin
		 counter : entity work.CountOneSec
				port map (clock => CLOCK_50, reset => '0', output => OUTPUT);
		 reg : entity work.registrador
				generic map ( larguraDados => 4 )
				port map (DIN => mux_output, DOUT => ULA_IN_A, CLK => CLOCK_50, RST => '0', ENABLE => '1');
		 ULA : entity work.ULA
				generic map ( larguraDados => 4 )
				port map (A => ULA_IN_A, B => OUTPUT, C => ULA_OUT, Sel => "00", overflow => overflowLocal);
		 XOR1 : entity work.xor2
				port map (A1 => ULA_OUT, A2 => "1010", X1 => xor_output);
		 MUX1 : entity work.mux2
				port map (A => ULA_OUT, B => (others => '0'), SEL => xor_output, X => mux_output);
		 display0 : entity work.conversorHex7seg
				port map (saida7seg => visor, dadoHex => ULA_IN_A, apaga => overflowLocal);
				
		 S => not xor_output;
	end tempo_architecture;
